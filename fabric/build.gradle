plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowImplementation
    implementation.extendsFrom shadowImplementation
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    maven {
        url = "https://maven.modmuss50.me/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "me.shedaniel:architectury-fabric:${rootProject.architectury_version}"
    shadowImplementation "me.zeroeightsix:fiber:0.23.0-SNAPSHOT"

    implementation(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    developmentFabric(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowImplementation]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
    manifest {
        attributes(
                "Maven-Artifact": "${rootProject.maven_group}:${rootProject.mod_id}-${project.name}:${rootProject.version}",
                "Specification-Title": rootProject.mod_id,
                "Specification-Vendor": "its_meow",
                "Specification-Version": "1",
                "Implementation-Title": rootProject.mod_id,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "its_meow",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${rootProject.mc_version}-${rootProject.fabric_api_version}"
        )
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    manifest {
        attributes(
                "Maven-Artifact": "${rootProject.maven_group}:${rootProject.mod_id}-${project.name}:${rootProject.version}",
                "Specification-Title": rootProject.mod_id,
                "Specification-Vendor": "its_meow",
                "Specification-Version": "1",
                "Implementation-Title": rootProject.mod_id,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "its_meow",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${rootProject.mc_version}-${rootProject.fabric_api_version}"
        )
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            pom {
                name = rootProject.name + "-" + project.name
                url = rootProject.url
                packaging = 'jar'
                scm {
                    connection = "scm:git:git://github.com/" + rootProject.github + ".git"
                    developerConnection = "scm:git:git@github.com:" + rootProject.github + ".git"
                    url = "https://github.com/" + rootProject.github
                }
                issueManagement {
                    system = 'github'
                    url = "https://github.com/" + rootProject.github + "/issues"
                }
                organization {
                    name = 'itsmeow Mods'
                    url = 'https://itsmeow.dev/'
                }
                developers {
                    developer {
                        id = 'itsmeow'
                        name = 'itsmeowdev'
                        email = 'itsmeow@itsmeow.dev'
                    }
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def configurationNames = ["modImplementation", "modApi"]
                    configurationNames.each { configurationName ->
                        configurations[configurationName].allDependencies.each {
                            if (!(it.name in ["architectury-transformer", "common"]) && !(it.group in ["curse.maven"])) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
        loom.disableDeprecatedPomGeneration(mavenFabric)
    }
}
