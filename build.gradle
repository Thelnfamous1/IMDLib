buildscript {
    repositories {
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: net.minecraftforge.gradle.userdev.UserDevPlugin
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
def mod_version = System.getenv('SHA_VERSION').equals("") || System.getenv('SHA_VERSION') == null ? "dev" : System.getenv('SHA_VERSION');
version = "${project.mc_version}-" + mod_version
group = "${project.maven_group}"
archivesBaseName = "${project.mod_id}"
def at_name = project.hasProperty('at_name') ? "${project.at_name}" : ""
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
minecraft {
    mappings channel: project.mappings_channel, version: "${project.mappings_version}-${project.mappings_mc_version}"
    if (project.hasProperty('at_file')) {
        accessTransformer = file("src/main/resources/META-INF/${at_file}.cfg")
    }
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            mods.create("${project.mod_id}").source(sourceSets.main);
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            mods.create("${project.mod_id}").source(sourceSets.main);
        }
    }
}
repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "itsmeow maven"
        url = "https://maven.itsmeow.dev/"
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
jar {
    manifest {
        mainAttributes(
            "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": "its_meow",
            "Specification-Version": "1",
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": mod_version,
            "Implementation-Vendor": "its_meow",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Built-On": "${project.mc_version}-${project.forge_version}",
            "FMLModType": "LIBRARY"
        )
    }
}
task sourceJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        mainAttributes(
            "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": "its_meow",
            "Specification-Version": "1",
            "Implementation-Title": archivesBaseName + '-sources',
            "Implementation-Version": mod_version,
            "Implementation-Vendor": "its_meow",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Built-On": "${project.mc_version}-${project.forge_version}"
        )
    }
}
artifacts {
    archives sourceJar
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact sourceJar {
                classifier 'sources'
            }
            pom {
                name = project.name
                url = project.url
                packaging = 'jar'
                scm {
                    connection = "scm:git:git://github.com/" + project.github + ".git"
                    developerConnection = "scm:git:git@github.com:" + project.github + ".git"
                    url = "https://github.com/" + project.github
                }
                issueManagement {
                    system = 'github'
                    url = "https://github.com/" + project.github + ".git/issues"
                }
                organization {
                    name = 'itsmeow Mods'
                    url = 'https://itsmeow.dev/'
                }
            }
        }
    }
    repositories {
        maven {
            if ((System.getenv("MAVEN_USER") != '') && (System.getenv("MAVEN_PASSWORD") != '')) {
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            }
            if (System.getenv("MAVEN_URL") != '') {
                url System.getenv("MAVEN_URL")
            } else {
                url "file:///${project.buildDir}/repo"
            }
        }
    }
}
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {

    // Minifies all .json files when building the mod.
    // Source files are not minified, only the jar copies.
    doLast {

        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0

        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }

        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}